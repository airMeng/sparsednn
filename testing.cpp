
#include <cnpy.h>
#include "mkl.h"
#include <vector>
#include <iostream>
#include <fstream>
#include <stdio.h>
#include <stdlib.h>
#include <cmath>
#include <time.h>
#include <cstdint>
#include <cstring>
#include <dlfcn.h>
#include <x86intrin.h>
// we are doing AC = AB * BC, reduce across the B dimension
// binding B to the x dimension, A to the y dimension and C to the z dimension

#define Tsy 1
#define Tsz (128 / 1)
#define ST 1
#define Fx 1
#define Fy (Tsz/Fx)

//#define 64 (64 / 1 / Tsy)

#define Usy (Tsy * Fy)
#define Gsy Usy

#define Gy 1
#define Block_size (Gy * Gsy)
#define X86 1
#define ARM 0
#include <pthread.h>
#include <cstdlib>


struct thread_data {
        const float * __restrict__ AB_val;
        const float * __restrict__ AB_bias;
        const float * __restrict__ BC;
        float * AC;
        int start;
        int end;
};

void * mm(void * threadarg)
{
        struct thread_data *my_data = (struct thread_data * ) threadarg;
        const float * __restrict__ AB_val = my_data->AB_val;
        const float * __restrict__ AB_bias = my_data->AB_bias;
        const float * __restrict__ BC = my_data->BC;
        float * AC = my_data->AC;
        int start = my_data->start;
        int end = my_data->end;

#if X86
    __m256 ACC[1];
	__m256 RC, val;
#elif ARM
    float32x4_t ACC[1];
    float32x4_t RC, val;
#endif
    __m256 zero = _mm256_setzero_ps();
   // #pragma omp parallel for schedule(static) private(ACC,RC,val,zero)

	for(int C_block = start; C_block < end; C_block ++){

	int C_offset = C_block * (128 / 1);
	
	


#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 0);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 1);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 2);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 3);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 4);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 5);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 6);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 7);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 8);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 9);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 10);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 11);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 12);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 13);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 14);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 15);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 16);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 17);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 18);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 19);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 20);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 21);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 22);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 23);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 24);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 25);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 26);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[0 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 0))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[0 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 27);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 28);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 29);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 30);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 31);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 32);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 33);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 34);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 35);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 36);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 37);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 38);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 39);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 40);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 41);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 42);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 43);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 44);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 45);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 46);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 47);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 48);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 49);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 50);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 51);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[128 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 1))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[128 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 52);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 53);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 54);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 55);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 56);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 57);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 58);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 59);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 60);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 61);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 62);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 63);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 64);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 65);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 66);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 67);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 68);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 69);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 70);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 71);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 72);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 73);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 74);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 75);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 76);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 77);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 78);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 79);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 80);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 81);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 82);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 83);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 84);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[256 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 2))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[256 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 85);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 86);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 87);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 88);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 89);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 90);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 91);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 92);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 93);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 94);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 95);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 96);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 97);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 98);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 99);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 100);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 101);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 102);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 103);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 104);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[384 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 3))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[384 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 105);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 106);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 107);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 108);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 109);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 110);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 111);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 112);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 113);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 114);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 115);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 116);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 117);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 118);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 119);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 120);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 121);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 122);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[512 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 4))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[512 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 123);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 124);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 125);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 126);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 127);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 128);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 129);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 130);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 131);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 132);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 133);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 134);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 135);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 136);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 137);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 138);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 139);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 140);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 141);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 142);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 143);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 144);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 145);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 146);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 147);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 148);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 149);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 150);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[640 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 5))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[640 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 151);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 152);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 153);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 154);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 155);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 156);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 157);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 158);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 159);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 160);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 161);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 162);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 163);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 164);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 165);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 166);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 167);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 168);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 169);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 170);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 171);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 172);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 173);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 174);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 175);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 176);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 177);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 178);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 179);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 180);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 181);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[768 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 6))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[768 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 182);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 183);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 184);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 185);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 186);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 187);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 188);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 189);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 190);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 191);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 192);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 193);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 194);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 195);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 196);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 197);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 198);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 199);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 200);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 201);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 202);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 203);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 204);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 205);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 206);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 207);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 208);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 209);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[896 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 7))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[896 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 210);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 211);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 212);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 213);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 214);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 215);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 216);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 217);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 218);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 219);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 220);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 221);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 222);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 223);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 224);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 225);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 226);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 227);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 228);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 229);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 230);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 231);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 232);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 233);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 234);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 235);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 236);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[1024 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 8))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[1024 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 237);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 238);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 239);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 240);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 241);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 242);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 243);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 244);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 245);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 246);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 247);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 248);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 249);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 250);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 251);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 252);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 253);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 254);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 255);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 256);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[1152 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 9))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[1152 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 257);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 258);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 259);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 260);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 261);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 262);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 263);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 264);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 265);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 266);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 267);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 268);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 269);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 270);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 271);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 272);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 273);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 274);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 275);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 276);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 277);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 278);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 279);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 280);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 281);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 282);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[1280 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 10))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[1280 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 283);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 284);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 285);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 286);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 287);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 288);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 289);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 290);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 291);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 292);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 293);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 294);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 295);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 296);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 297);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 298);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 299);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 300);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 301);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 302);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 303);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 304);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 305);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 306);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 307);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 308);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[1408 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 11))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[1408 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 309);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 310);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 311);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 312);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 313);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 314);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 315);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 316);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 317);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 318);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 319);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 320);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 321);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 322);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 323);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 324);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 325);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 326);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 327);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 328);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 329);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 330);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 331);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 332);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 333);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 334);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 335);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 336);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[1536 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 12))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[1536 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 337);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 338);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 339);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 340);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 341);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 342);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 343);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 344);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 345);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 346);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 347);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 348);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 349);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 350);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 351);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 352);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 353);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 354);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 355);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 356);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 357);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 358);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 359);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 360);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 361);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[1664 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 13))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[1664 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 362);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 363);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 364);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 365);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 366);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 367);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 368);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 369);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 370);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 371);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 372);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 373);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 374);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 375);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 376);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 377);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 378);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 379);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 380);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 381);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 382);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 383);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 384);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 385);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 386);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 387);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[1792 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 14))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[1792 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 388);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 389);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 390);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 391);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 392);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 393);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 394);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 395);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 396);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 397);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 398);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 399);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 400);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 401);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 402);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 403);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 404);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 405);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 406);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 407);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 408);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 409);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 410);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 411);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 412);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[1920 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 15))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[1920 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 413);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 414);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 415);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 416);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 417);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 418);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 419);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 420);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 421);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 422);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 423);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 424);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 425);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 426);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 427);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 428);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 429);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 430);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 431);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 432);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 433);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 434);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[2048 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 16))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[2048 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 435);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 436);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 437);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 438);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 439);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 440);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 441);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 442);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 443);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 444);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 445);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 446);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 447);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 448);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 449);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 450);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 451);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 452);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 453);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 454);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 455);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 456);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 457);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 458);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 459);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 460);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 461);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 462);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 463);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 464);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 465);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 466);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 467);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 468);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 469);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[2176 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 17))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[2176 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 470);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 471);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 472);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 473);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 474);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 475);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 476);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 477);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 478);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 479);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 480);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 481);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 482);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 483);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 484);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 485);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 486);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 487);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 488);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 489);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 490);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 491);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 492);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 493);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 494);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 495);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 496);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 497);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 498);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[2304 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 18))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[2304 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 499);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 500);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 501);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 502);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 503);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 504);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 505);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 506);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 507);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 508);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 509);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 510);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 511);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 512);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 513);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 514);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 515);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 516);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 517);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 518);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 519);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 520);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 521);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 522);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 523);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 524);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 525);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[2432 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 19))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[2432 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 526);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 527);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 528);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 529);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 530);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 531);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 532);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 533);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 534);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 535);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 536);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 537);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 538);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 539);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 540);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 541);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 542);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 543);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 544);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 545);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 546);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 547);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 548);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 549);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 550);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 551);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 552);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 553);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 554);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[2560 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 20))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[2560 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 555);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 556);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 557);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 558);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 559);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 560);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 561);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 562);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 563);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 564);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 565);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 566);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 567);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 568);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 569);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 570);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 571);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 572);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 573);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 574);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 575);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[2688 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 21))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[2688 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 576);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 577);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 578);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 579);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 580);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 581);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 582);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 583);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 584);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 585);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 586);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 587);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 588);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 589);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 590);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 591);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 592);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 593);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 594);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 595);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 596);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 597);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 598);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 599);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 600);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 601);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 602);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 603);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 604);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 605);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 606);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 607);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[2816 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 22))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[2816 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 608);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 609);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 610);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 611);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 612);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 613);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 614);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 615);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 616);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 617);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 618);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 619);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 620);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 621);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 622);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 623);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 624);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 625);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 626);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 627);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 628);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 629);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 630);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[2944 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 23))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[2944 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 631);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 632);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 633);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 634);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 635);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 636);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 637);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 638);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 639);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 640);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 641);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 642);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 643);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 644);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 645);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 646);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 647);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 648);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 649);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 650);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 651);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 652);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 653);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 654);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 655);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 656);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[3072 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 24))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[3072 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 657);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 658);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 659);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 660);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 661);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 662);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 663);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 664);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 665);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 666);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 667);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 668);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 669);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 670);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 671);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 672);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 673);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 674);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 675);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 676);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 677);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 678);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 679);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 680);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 681);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 682);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 683);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 684);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[3200 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 25))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[3200 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 685);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 686);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 687);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 688);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 689);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 690);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 691);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 692);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 693);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 694);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 695);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 696);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 697);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 698);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 699);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 700);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 701);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 702);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 703);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 704);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 705);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 706);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 707);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 708);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 709);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 710);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 711);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[3328 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 26))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[3328 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 712);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 713);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 714);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 715);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 716);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 717);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 718);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 719);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 720);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 721);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 722);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 723);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 724);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 725);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 726);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 727);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 728);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 729);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 730);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 731);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 732);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 733);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 734);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 735);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[3456 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 27))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[3456 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 736);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 737);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 738);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 739);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 740);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 741);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 742);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 743);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 744);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 745);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 746);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 747);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 748);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 749);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 750);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 751);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 752);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 753);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 754);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 755);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 756);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 757);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 758);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 759);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 760);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 761);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 762);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 763);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 764);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 765);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 766);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 767);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 768);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[3584 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 28))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[3584 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 769);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 770);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 771);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 772);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 773);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 774);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 775);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 776);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 777);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 778);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 779);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 780);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 781);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 782);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 783);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 784);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 785);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 786);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 787);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[3712 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 29))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[3712 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 788);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 789);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 790);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 791);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 792);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 793);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 794);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 795);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 796);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 797);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 798);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 799);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 800);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 801);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 802);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 803);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 804);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 805);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 806);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 807);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 808);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 809);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 810);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 811);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 812);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 813);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 814);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 815);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 816);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 817);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[3840 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 30))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[3840 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 818);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 819);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 820);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 821);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 822);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 823);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 824);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 825);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 826);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 827);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 828);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 829);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 830);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 831);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 832);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 833);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 834);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 835);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 836);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 837);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 838);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 839);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 840);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 841);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 842);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 843);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[3968 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 31))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[3968 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 844);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 845);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 846);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 847);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 848);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 849);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 850);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 851);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 852);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 853);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 854);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 855);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 856);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 857);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 858);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 859);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 860);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 861);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 862);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 863);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 864);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 865);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 866);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 867);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 868);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 869);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 870);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 871);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 872);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[4096 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 32))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[4096 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 873);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 874);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 875);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 876);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 877);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 878);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 879);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 880);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 881);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 882);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 883);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 884);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 885);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 886);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 887);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 888);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 889);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 890);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 891);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 892);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 893);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 894);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 895);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 896);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 897);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 898);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 899);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 900);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 901);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 902);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 903);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[4224 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 33))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[4224 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 904);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 905);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 906);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 907);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 908);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 909);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 910);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 911);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 912);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 913);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 914);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 915);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 916);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 917);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 918);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 919);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 920);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 921);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 922);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 923);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 924);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 925);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 926);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 927);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 928);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[4352 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 34))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[4352 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 929);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 930);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 931);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 932);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 933);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 934);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 935);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 936);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 937);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 938);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 939);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 940);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 941);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 942);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 943);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 944);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 945);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 946);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 947);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 948);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 949);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 950);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 951);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 952);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 953);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[4480 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 35))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[4480 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 954);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 955);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 956);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 957);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 958);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 959);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 960);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 961);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 962);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 963);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 964);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 965);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 966);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 967);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 968);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 969);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 970);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 971);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 972);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 973);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 974);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 975);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 976);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 977);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[4608 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 36))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[4608 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 978);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 979);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 980);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 981);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 982);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 983);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 984);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 985);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 986);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 987);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 988);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 989);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 990);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 991);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 992);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 993);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 994);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 995);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 996);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 997);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 998);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 999);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 1000);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[4736 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 37))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[4736 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 1001);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 1002);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 1003);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 1004);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 1005);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 1006);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 1007);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 1008);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 1009);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 1010);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 1011);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 1012);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 1013);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 1014);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 1015);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 1016);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 1017);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 1018);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 1019);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 1020);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 1021);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 1022);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 1023);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 1024);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[4864 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 38))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[4864 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 1025);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 1026);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 1027);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 1028);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 1029);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 1030);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 1031);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 1032);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 1033);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 1034);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 1035);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 1036);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 1037);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 1038);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 1039);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 1040);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 1041);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 1042);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 1043);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 1044);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 1045);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 1046);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 1047);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 1048);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 1049);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 1050);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 1051);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 1052);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 1053);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 1054);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[4992 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 39))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[4992 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 1055);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 1056);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 1057);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 1058);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 1059);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 1060);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 1061);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 1062);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 1063);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 1064);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 1065);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 1066);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 1067);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 1068);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 1069);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 1070);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 1071);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 1072);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 1073);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[5120 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 40))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[5120 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 1074);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 1075);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 1076);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 1077);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 1078);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 1079);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 1080);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 1081);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 1082);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 1083);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 1084);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 1085);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 1086);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 1087);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 1088);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 1089);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 1090);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 1091);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 1092);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 1093);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 1094);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 1095);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 1096);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 1097);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[5248 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 41))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[5248 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 1098);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 1099);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 1100);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 1101);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 1102);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 1103);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 1104);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 1105);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 1106);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 1107);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 1108);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 1109);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 1110);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 1111);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 1112);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 1113);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 1114);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 1115);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 1116);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 1117);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 1118);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 1119);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 1120);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 1121);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 1122);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 1123);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 1124);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 1125);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 1126);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 1127);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[5376 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 42))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[5376 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 1128);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 1129);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 1130);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 1131);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 1132);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 1133);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 1134);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 1135);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 1136);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 1137);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 1138);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 1139);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 1140);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 1141);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 1142);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 1143);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 1144);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 1145);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 1146);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 1147);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 1148);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 1149);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 1150);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 1151);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 1152);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[5504 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 43))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[5504 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 1153);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 1154);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 1155);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 1156);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 1157);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 1158);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 1159);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 1160);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 1161);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 1162);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 1163);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 1164);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 1165);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 1166);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 1167);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 1168);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 1169);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 1170);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 1171);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 1172);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 1173);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 1174);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 1175);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 1176);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[5632 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 44))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[5632 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 1177);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 1178);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 1179);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 1180);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 1181);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 1182);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 1183);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 1184);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 1185);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 1186);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 1187);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 1188);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 1189);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 1190);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 1191);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 1192);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 1193);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 1194);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 1195);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 1196);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 1197);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[5760 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 45))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[5760 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 1198);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 1199);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 1200);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 1201);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 1202);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 1203);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 1204);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 1205);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 1206);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 1207);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 1208);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 1209);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 1210);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 1211);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 1212);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 1213);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 1214);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 1215);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 1216);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 1217);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 1218);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 1219);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 1220);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 1221);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 1222);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 1223);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 1224);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 1225);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 1226);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 1227);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 1228);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[5888 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 46))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[5888 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 1229);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 1230);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 1231);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 1232);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 1233);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 1234);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 1235);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 1236);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 1237);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 1238);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 1239);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 1240);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 1241);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 1242);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 1243);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 1244);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 1245);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 1246);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 1247);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 1248);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[6016 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 47))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[6016 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 1249);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 1250);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 1251);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 1252);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 1253);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 1254);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 1255);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 1256);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 1257);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 1258);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 1259);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 1260);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 1261);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 1262);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 1263);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 1264);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 1265);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 1266);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 1267);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 1268);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 1269);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 1270);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 1271);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 1272);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 1273);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[6144 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 48))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[6144 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 1274);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 1275);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 1276);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 1277);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 1278);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 1279);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 1280);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 1281);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 1282);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 1283);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 1284);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 1285);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 1286);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 1287);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 1288);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 1289);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 1290);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 1291);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 1292);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 1293);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 1294);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 1295);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 1296);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[6272 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 49))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[6272 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 1297);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 1298);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 1299);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 1300);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 1301);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 1302);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 1303);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 1304);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 1305);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 1306);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 1307);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 1308);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 1309);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 1310);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 1311);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 1312);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 1313);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 1314);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 1315);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 1316);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 1317);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 1318);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 1319);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 1320);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 1321);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 1322);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 1323);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 1324);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 1325);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 1326);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 1327);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 1328);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 1329);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 1330);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 1331);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 1332);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[6400 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 50))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[6400 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 1333);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 1334);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 1335);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 1336);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 1337);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 1338);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 1339);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 1340);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 1341);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 1342);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 1343);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 1344);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 1345);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 1346);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 1347);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 1348);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 1349);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 1350);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 1351);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 1352);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 1353);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 1354);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 1355);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 1356);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 1357);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 1358);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 1359);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 1360);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 1361);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 1362);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 1363);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[6528 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 51))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[6528 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 1364);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 1365);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 1366);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 1367);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 1368);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 1369);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 1370);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 1371);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 1372);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 1373);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 1374);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 1375);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 1376);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 1377);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 1378);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 1379);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 1380);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 1381);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 1382);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 1383);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 1384);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[6656 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 52))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[6656 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 1385);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 1386);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 1387);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 1388);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 1389);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 1390);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 1391);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 1392);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 1393);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 1394);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 1395);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 1396);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 1397);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 1398);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 1399);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 1400);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 1401);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 1402);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 1403);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 1404);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 1405);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 1406);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 1407);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 1408);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 1409);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 1410);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 1411);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[6784 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 53))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[6784 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 1412);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 1413);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 1414);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 1415);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 1416);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 1417);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 1418);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 1419);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 1420);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 1421);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 1422);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 1423);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 1424);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 1425);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 1426);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 1427);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 1428);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 1429);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 1430);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 1431);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 1432);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 1433);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 1434);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 1435);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 1436);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 1437);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 1438);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 1439);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[6912 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 54))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[6912 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 1440);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 1441);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 1442);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 1443);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 1444);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 1445);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 1446);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 1447);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 1448);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 1449);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 1450);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 1451);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 1452);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 1453);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 1454);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 1455);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 1456);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 1457);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 1458);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 1459);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 1460);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 1461);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 1462);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 1463);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 1464);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 1465);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 1466);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 1467);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 1468);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 1469);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 1470);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 1471);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[7040 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 55))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[7040 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 1472);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 1473);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 1474);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 1475);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 1476);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 1477);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 1478);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 1479);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 1480);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 1481);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 1482);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 1483);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 1484);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 1485);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 1486);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 1487);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 1488);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 1489);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 1490);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 1491);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 1492);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 1493);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 1494);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 1495);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 1496);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[7168 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 56))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[7168 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 1497);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 1498);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 1499);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 1500);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 1501);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 1502);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 1503);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 1504);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 1505);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 1506);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 1507);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 1508);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 1509);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 1510);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 1511);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 1512);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 1513);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 1514);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 1515);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 1516);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 1517);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 1518);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[7296 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 57))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[7296 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 1519);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 1520);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 1521);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 1522);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 1523);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 1524);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 1525);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 1526);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 1527);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 1528);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 1529);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 1530);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 1531);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 1532);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 1533);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 1534);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 1535);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 1536);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 1537);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 1538);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 1539);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 1540);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 1541);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 1542);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 1543);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[7424 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 58))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[7424 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 1544);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 1545);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 1546);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 1547);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 1548);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 1549);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 1550);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 1551);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 1552);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 1553);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 1554);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 1555);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 1556);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 1557);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 1558);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 1559);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 1560);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 1561);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 1562);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 1563);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 1564);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 1565);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 1566);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 1567);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 1568);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 1569);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 1570);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 1571);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 1572);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 1573);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 1574);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 1575);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 1576);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[7552 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 59))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[7552 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 1577);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 1578);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 1579);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 1580);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 1581);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 1582);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 1583);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 1584);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 1585);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 1586);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 1587);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 1588);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 1589);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 1590);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 1591);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 1592);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 1593);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 1594);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 1595);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 1596);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 1597);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 1598);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 1599);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 1600);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 1601);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[7680 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 60))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[7680 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 1602);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 1603);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 1604);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 1605);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 1606);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 1607);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 1608);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 1609);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 1610);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 1611);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 1612);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 1613);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 1614);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 1615);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 1616);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 1617);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 1618);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 1619);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 1620);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 1621);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 1622);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 1623);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 1624);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 1625);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[7808 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 61))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[7808 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 1626);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 1627);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 1628);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 1629);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 1630);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 1631);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 1632);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 1633);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 1634);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 1635);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 1636);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 1637);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 1638);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 1639);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 1640);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 1641);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 1642);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 1643);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 1644);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 1645);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 1646);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 1647);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 1648);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 1649);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[7936 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 62))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[7936 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 1650);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 1651);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 1652);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 1653);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 1654);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 1655);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 1656);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 1657);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 1658);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 1659);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 1660);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 1661);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 1662);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 1663);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 1664);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 1665);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 1666);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 1667);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 1668);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 1669);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 1670);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 1671);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[8064 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 63))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[8064 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 1672);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 1673);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 1674);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 1675);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 1676);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 1677);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 1678);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 1679);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 1680);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 1681);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 1682);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 1683);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 1684);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 1685);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 1686);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 1687);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 1688);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 1689);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 1690);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 1691);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 1692);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 1693);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 1694);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 1695);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[8192 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 64))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[8192 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 1696);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 1697);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 1698);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 1699);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 1700);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 1701);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 1702);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 1703);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 1704);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 1705);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 1706);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 1707);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 1708);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 1709);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 1710);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 1711);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 1712);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 1713);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 1714);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 1715);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 1716);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 1717);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 1718);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[8320 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 65))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[8320 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 1719);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 1720);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 1721);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 1722);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 1723);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 1724);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 1725);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 1726);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 1727);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 1728);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 1729);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 1730);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 1731);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 1732);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 1733);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 1734);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 1735);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 1736);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 1737);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 1738);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 1739);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 1740);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[8448 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 66))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[8448 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 1741);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 1742);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 1743);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 1744);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 1745);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 1746);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 1747);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 1748);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 1749);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 1750);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 1751);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 1752);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 1753);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 1754);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 1755);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 1756);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 1757);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 1758);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 1759);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 1760);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 1761);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 1762);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 1763);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 1764);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 1765);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 1766);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 1767);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 1768);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 1769);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[8576 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 67))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[8576 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 1770);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 1771);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 1772);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 1773);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 1774);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 1775);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 1776);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 1777);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 1778);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 1779);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 1780);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 1781);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 1782);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 1783);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 1784);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 1785);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 1786);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 1787);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 1788);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 1789);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 1790);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 1791);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 1792);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 1793);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 1794);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 1795);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 1796);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[8704 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 68))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[8704 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 1797);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 1798);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 1799);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 1800);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 1801);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 1802);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 1803);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 1804);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 1805);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 1806);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 1807);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 1808);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 1809);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 1810);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 1811);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 1812);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 1813);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 1814);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 1815);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 1816);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 1817);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 1818);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 1819);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 1820);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 1821);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 1822);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 1823);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 1824);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 1825);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[8832 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 69))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[8832 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 1826);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 1827);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 1828);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 1829);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 1830);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 1831);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 1832);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 1833);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 1834);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 1835);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 1836);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 1837);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 1838);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 1839);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 1840);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 1841);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 1842);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 1843);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 1844);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 1845);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 1846);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 1847);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 1848);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 1849);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 1850);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 1851);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[8960 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 70))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[8960 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 1852);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 1853);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 1854);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 1855);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 1856);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 1857);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 1858);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 1859);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 1860);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 1861);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 1862);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 1863);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 1864);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 1865);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 1866);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 1867);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 1868);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 1869);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 1870);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 1871);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 1872);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 1873);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 1874);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[9088 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 71))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[9088 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 1875);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 1876);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 1877);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 1878);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 1879);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 1880);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 1881);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 1882);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 1883);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 1884);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 1885);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 1886);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 1887);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 1888);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 1889);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 1890);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 1891);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 1892);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 1893);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 1894);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 1895);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 1896);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 1897);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 1898);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 1899);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 1900);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 1901);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 1902);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 1903);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[9216 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 72))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[9216 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 1904);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 1905);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 1906);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 1907);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 1908);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 1909);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 1910);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 1911);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 1912);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 1913);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 1914);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 1915);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 1916);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 1917);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 1918);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 1919);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 1920);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 1921);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 1922);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 1923);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 1924);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 1925);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[9344 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 73))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[9344 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 1926);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 1927);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 1928);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 1929);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 1930);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 1931);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 1932);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 1933);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 1934);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 1935);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 1936);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 1937);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 1938);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 1939);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 1940);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 1941);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 1942);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 1943);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 1944);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 1945);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 1946);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 1947);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 1948);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 1949);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 1950);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 1951);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 1952);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 1953);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 1954);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 1955);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[9472 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 74))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[9472 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 1956);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 1957);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 1958);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 1959);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 1960);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 1961);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 1962);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 1963);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 1964);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 1965);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 1966);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 1967);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 1968);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 1969);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 1970);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 1971);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 1972);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 1973);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 1974);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 1975);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 1976);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 1977);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[9600 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 75))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[9600 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 1978);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 1979);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 1980);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 1981);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 1982);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 1983);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 1984);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 1985);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 1986);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 1987);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 1988);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 1989);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 1990);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 1991);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 1992);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 1993);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 1994);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 1995);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 1996);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 1997);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 1998);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 1999);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 2000);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 2001);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 2002);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 2003);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 2004);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[9728 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 76))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[9728 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 2005);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 2006);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 2007);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 2008);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 2009);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 2010);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 2011);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 2012);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 2013);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 2014);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 2015);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 2016);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 2017);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 2018);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 2019);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 2020);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 2021);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 2022);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 2023);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 2024);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 2025);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 2026);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 2027);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 2028);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 2029);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 2030);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 2031);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 2032);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 2033);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[9856 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 77))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[9856 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 2034);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 2035);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 2036);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 2037);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 2038);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 2039);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 2040);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 2041);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 2042);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 2043);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 2044);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 2045);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 2046);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 2047);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 2048);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 2049);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 2050);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 2051);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 2052);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 2053);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 2054);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 2055);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 2056);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 2057);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 2058);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 2059);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[9984 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 78))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[9984 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 2060);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 2061);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 2062);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 2063);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 2064);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 2065);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 2066);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 2067);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 2068);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 2069);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 2070);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 2071);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 2072);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 2073);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 2074);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 2075);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 2076);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 2077);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 2078);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 2079);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 2080);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 2081);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 2082);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 2083);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 2084);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 2085);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 2086);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 2087);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 2088);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 2089);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 2090);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[10112 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 79))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[10112 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 2091);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 2092);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 2093);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 2094);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 2095);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 2096);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 2097);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 2098);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 2099);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 2100);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 2101);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 2102);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 2103);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 2104);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 2105);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 2106);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 2107);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 2108);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 2109);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 2110);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 2111);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 2112);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 2113);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[10240 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 80))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[10240 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 2114);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 2115);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 2116);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 2117);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 2118);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 2119);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 2120);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 2121);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 2122);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 2123);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 2124);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 2125);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 2126);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 2127);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 2128);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 2129);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 2130);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 2131);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 2132);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 2133);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 2134);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 2135);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 2136);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 2137);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 2138);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 2139);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 2140);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 2141);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 2142);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[10368 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 81))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[10368 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 2143);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 2144);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 2145);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 2146);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 2147);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 2148);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 2149);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 2150);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 2151);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 2152);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 2153);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 2154);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 2155);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 2156);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 2157);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 2158);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 2159);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 2160);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 2161);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 2162);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[10496 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 82))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[10496 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 2163);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 2164);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 2165);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 2166);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 2167);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 2168);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 2169);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 2170);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 2171);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 2172);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 2173);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 2174);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 2175);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 2176);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 2177);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 2178);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 2179);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 2180);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 2181);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 2182);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 2183);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 2184);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 2185);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 2186);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 2187);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 2188);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 2189);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 2190);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[10624 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 83))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[10624 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 2191);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 2192);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 2193);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 2194);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 2195);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 2196);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 2197);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 2198);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 2199);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 2200);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 2201);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 2202);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 2203);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 2204);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 2205);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 2206);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 2207);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 2208);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 2209);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 2210);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 2211);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 2212);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 2213);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[10752 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 84))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[10752 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 2214);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 2215);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 2216);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 2217);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 2218);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 2219);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 2220);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 2221);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 2222);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 2223);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 2224);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 2225);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 2226);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 2227);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 2228);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 2229);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 2230);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 2231);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 2232);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 2233);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 2234);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 2235);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 2236);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 2237);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 2238);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 2239);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 2240);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 2241);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 2242);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 2243);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 2244);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[10880 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 85))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[10880 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 2245);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 2246);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 2247);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 2248);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 2249);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 2250);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 2251);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 2252);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 2253);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 2254);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 2255);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 2256);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 2257);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 2258);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 2259);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 2260);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 2261);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 2262);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 2263);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 2264);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 2265);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 2266);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 2267);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 2268);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 2269);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 2270);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[11008 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 86))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[11008 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 2271);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 2272);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 2273);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 2274);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 2275);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 2276);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 2277);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 2278);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 2279);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 2280);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 2281);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 2282);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 2283);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 2284);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 2285);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 2286);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 2287);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 2288);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 2289);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 2290);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 2291);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 2292);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 2293);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 2294);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 2295);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 2296);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 2297);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 2298);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 2299);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[11136 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 87))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[11136 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 2300);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 2301);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 2302);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 2303);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 2304);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 2305);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 2306);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 2307);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 2308);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 2309);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 2310);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 2311);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 2312);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 2313);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 2314);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 2315);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 2316);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 2317);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 2318);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 2319);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 2320);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 2321);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 2322);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 2323);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[11264 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 88))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[11264 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 2324);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 2325);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 2326);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 2327);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 2328);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 2329);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 2330);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 2331);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 2332);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 2333);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 2334);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 2335);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 2336);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 2337);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 2338);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 2339);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 2340);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 2341);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 2342);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 2343);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 2344);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 2345);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 2346);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 2347);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 2348);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 2349);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 2350);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 2351);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[11392 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 89))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[11392 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 2352);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 2353);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 2354);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 2355);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 2356);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 2357);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 2358);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 2359);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 2360);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 2361);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 2362);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 2363);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 2364);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 2365);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 2366);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 2367);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 2368);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 2369);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 2370);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 2371);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 2372);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 2373);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 2374);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 2375);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[11520 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 90))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[11520 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 2376);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 2377);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 2378);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 2379);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 2380);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 2381);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 2382);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 2383);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 2384);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 2385);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 2386);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 2387);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 2388);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 2389);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 2390);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 2391);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 2392);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 2393);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 2394);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 2395);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 2396);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 2397);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 2398);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[11648 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 91))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[11648 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 2399);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 2400);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 2401);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 2402);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 2403);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 2404);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 2405);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 2406);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 2407);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 2408);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 2409);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 2410);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 2411);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 2412);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 2413);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 2414);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 2415);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 2416);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 2417);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 2418);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 2419);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 2420);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 2421);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 2422);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 2423);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 2424);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 2425);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[11776 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 92))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[11776 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 2426);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 2427);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 2428);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 2429);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 2430);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 2431);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 2432);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 2433);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 2434);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 2435);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 2436);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 2437);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 2438);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 2439);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 2440);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 2441);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 2442);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 2443);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 2444);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 2445);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 2446);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 2447);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 2448);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 2449);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 2450);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 2451);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 2452);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 2453);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 2454);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 2455);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 2456);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 2457);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[11904 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 93))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[11904 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 2458);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 2459);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 2460);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 2461);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 2462);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 2463);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 2464);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 2465);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 2466);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 2467);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 2468);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 2469);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 2470);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 2471);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 2472);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 2473);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 2474);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 2475);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 2476);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 2477);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 2478);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 2479);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 2480);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 2481);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 2482);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 2483);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[12032 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 94))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[12032 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 2484);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 2485);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 2486);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 2487);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 2488);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 2489);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 2490);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 2491);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 2492);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 2493);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 2494);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 2495);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 2496);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 2497);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 2498);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 2499);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 2500);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 2501);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 2502);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 2503);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 2504);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 2505);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 2506);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 2507);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 2508);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 2509);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 2510);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 2511);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[12160 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 95))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[12160 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 2512);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 2513);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 2514);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 2515);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 2516);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 2517);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 2518);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 2519);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 2520);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 2521);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 2522);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 2523);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 2524);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 2525);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 2526);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 2527);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 2528);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 2529);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 2530);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 2531);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 2532);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 2533);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 2534);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 2535);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 2536);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 2537);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 2538);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 2539);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[12288 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 96))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[12288 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 2540);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 2541);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 2542);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 2543);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 2544);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 2545);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 2546);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 2547);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 2548);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 2549);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 2550);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 2551);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 2552);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 2553);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 2554);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 2555);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 2556);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 2557);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 2558);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 2559);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 2560);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 2561);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 2562);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 2563);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 2564);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 2565);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 2566);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 2567);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 2568);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[12416 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 97))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[12416 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 2569);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 2570);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 2571);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 2572);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 2573);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 2574);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 2575);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 2576);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 2577);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 2578);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 2579);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 2580);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 2581);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 2582);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 2583);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 2584);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 2585);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 2586);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 2587);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 2588);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 2589);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 2590);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 2591);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 2592);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 2593);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 2594);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[12544 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 98))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[12544 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 2595);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 2596);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 2597);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 2598);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 2599);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 2600);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 2601);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 2602);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 2603);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 2604);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 2605);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 2606);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 2607);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 2608);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 2609);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 2610);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 2611);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 2612);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 2613);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 2614);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 2615);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 2616);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 2617);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 2618);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 2619);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[12672 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 99))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[12672 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 2620);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 2621);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 2622);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 2623);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 2624);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 2625);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 2626);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 2627);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 2628);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 2629);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 2630);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 2631);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 2632);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 2633);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 2634);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 2635);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 2636);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 2637);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 2638);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 2639);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 2640);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[12800 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 100))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[12800 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 2641);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 2642);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 2643);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 2644);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 2645);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 2646);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 2647);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 2648);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 2649);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 2650);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 2651);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 2652);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 2653);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 2654);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 2655);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 2656);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 2657);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 2658);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 2659);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 2660);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 2661);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 2662);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 2663);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 2664);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 2665);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 2666);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 2667);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[12928 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 101))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[12928 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 2668);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 2669);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 2670);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 2671);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 2672);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 2673);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 2674);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 2675);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 2676);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 2677);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 2678);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 2679);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 2680);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 2681);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 2682);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 2683);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 2684);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 2685);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 2686);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 2687);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 2688);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 2689);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 2690);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 2691);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 2692);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 2693);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 2694);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 2695);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 2696);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 2697);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 2698);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[13056 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 102))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[13056 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 2699);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 2700);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 2701);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 2702);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 2703);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 2704);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 2705);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 2706);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 2707);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 2708);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 2709);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 2710);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 2711);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 2712);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 2713);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 2714);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 2715);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 2716);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 2717);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 2718);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 2719);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 2720);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 2721);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 2722);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 2723);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[13184 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 103))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[13184 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 2724);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 2725);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 2726);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 2727);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 2728);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 2729);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 2730);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 2731);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 2732);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 2733);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 2734);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 2735);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 2736);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 2737);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 2738);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 2739);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 2740);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 2741);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 2742);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 2743);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 2744);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 2745);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 2746);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 2747);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 2748);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[13312 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 104))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[13312 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 2749);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 2750);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 2751);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 2752);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 2753);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 2754);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 2755);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 2756);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 2757);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 2758);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 2759);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 2760);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 2761);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 2762);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 2763);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 2764);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 2765);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 2766);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 2767);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 2768);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 2769);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 2770);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 2771);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 2772);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 2773);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 2774);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 2775);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[13440 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 105))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[13440 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 2776);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 2777);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 2778);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 2779);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 2780);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 2781);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 2782);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 2783);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 2784);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 2785);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 2786);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 2787);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 2788);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 2789);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 2790);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 2791);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 2792);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 2793);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 2794);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 2795);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 2796);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 2797);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 2798);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 2799);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 2800);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 2801);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 2802);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[13568 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 106))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[13568 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 2803);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 2804);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 2805);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 2806);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 2807);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 2808);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 2809);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 2810);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 2811);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 2812);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 2813);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 2814);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 2815);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 2816);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 2817);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 2818);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 2819);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 2820);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 2821);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 2822);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 2823);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 2824);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 2825);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 2826);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[13696 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 107))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[13696 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 2827);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 2828);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 2829);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 2830);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 2831);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 2832);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 2833);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 2834);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 2835);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 2836);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 2837);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 2838);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 2839);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 2840);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 2841);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 2842);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 2843);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 2844);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 2845);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 2846);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 2847);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 2848);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 2849);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 2850);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 2851);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[13824 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 108))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[13824 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 2852);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 2853);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 2854);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 2855);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 2856);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 2857);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 2858);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 2859);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 2860);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 2861);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 2862);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 2863);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 2864);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 2865);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 2866);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 2867);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 2868);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 2869);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 2870);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 2871);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 2872);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 2873);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 2874);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 2875);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[13952 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 109))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[13952 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 2876);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 2877);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 2878);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 2879);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 2880);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 2881);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 2882);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 2883);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 2884);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 2885);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 2886);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 2887);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 2888);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 2889);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 2890);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 2891);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 2892);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 2893);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 2894);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 2895);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 2896);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 2897);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 2898);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 2899);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[14080 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 110))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[14080 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 2900);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 2901);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 2902);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 2903);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 2904);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 2905);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 2906);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 2907);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 2908);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 2909);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 2910);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 2911);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 2912);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 2913);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 2914);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 2915);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 2916);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 2917);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 2918);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 2919);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 2920);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 2921);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 2922);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 2923);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 2924);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 2925);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 2926);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 2927);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 2928);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 2929);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 2930);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 2931);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[14208 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 111))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[14208 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 2932);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 2933);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 2934);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 2935);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 2936);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 2937);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 2938);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 2939);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 2940);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 2941);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 2942);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 2943);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 2944);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 2945);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 2946);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 2947);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 2948);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 2949);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 2950);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 2951);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 2952);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 2953);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 2954);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 2955);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 2956);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 2957);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 2958);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 2959);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 2960);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[14336 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 112))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[14336 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 2961);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 2962);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 2963);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 2964);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 2965);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 2966);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 2967);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 2968);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 2969);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 2970);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 2971);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 2972);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 2973);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 2974);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 2975);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 2976);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 2977);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 2978);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 2979);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 2980);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 2981);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 2982);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 2983);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 2984);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 2985);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 2986);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[14464 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 113))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[14464 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 2987);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 2988);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 2989);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 2990);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 2991);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 2992);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 2993);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 2994);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 2995);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 2996);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 2997);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 2998);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 2999);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 3000);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 3001);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 3002);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 3003);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 3004);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 3005);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 3006);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 3007);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 3008);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 3009);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 3010);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 3011);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 3012);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[14592 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 114))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[14592 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 3013);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 3014);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 3015);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 3016);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 3017);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 3018);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 3019);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 3020);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 3021);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 3022);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 3023);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 3024);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 3025);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 3026);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 3027);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 3028);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 3029);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 3030);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 3031);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 3032);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 3033);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 3034);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 3035);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[14720 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 115))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[14720 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 3036);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 3037);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 3038);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 3039);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 3040);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 3041);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 3042);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 3043);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 3044);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 3045);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 3046);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 3047);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 3048);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 3049);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 3050);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 3051);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 3052);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 3053);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 3054);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 3055);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 3056);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 3057);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 3058);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 3059);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[14848 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 116))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[14848 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 3060);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 3061);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 3062);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 3063);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 3064);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2304 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2304]);
            
		            val = _mm256_broadcast_ss(AB_val + 3065);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 3066);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 3067);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 3068);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 3069);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 3070);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 3071);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 3072);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 3073);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 3074);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5376 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5376]);
            
		            val = _mm256_broadcast_ss(AB_val + 3075);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 3076);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 3077);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 3078);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 3079);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 3080);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 3081);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 3082);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 3083);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 3084);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 3085);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[14976 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 117))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[14976 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 3086);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 3087);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 3088);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 3089);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 3090);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 3091);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 3092);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 3093);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 3094);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 3095);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 3096);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 3097);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 3098);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 3099);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 3100);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 3101);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 3102);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 3103);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 3104);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 3105);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 3106);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 3107);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 3108);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 3109);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 3110);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 3111);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[15104 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 118))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[15104 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 3112);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 3113);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 3114);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 3115);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 3116);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 3117);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 3118);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 3119);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 3120);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 3121);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 3122);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 3123);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 3124);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 3125);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 3126);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 3127);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 3128);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 3129);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 3130);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[15232 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 119))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[15232 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 3131);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 3132);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 3133);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 3134);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 3135);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 3136);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 3137);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 3138);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 3139);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 3140);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 3141);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 3142);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 3143);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 3144);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 3145);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 3146);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 3147);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 3148);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6400 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6400]);
            
		            val = _mm256_broadcast_ss(AB_val + 3149);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 3150);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 3151);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 3152);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 3153);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[15360 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 120))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[15360 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 3154);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 3155);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 3156);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 3157);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 3158);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2176 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2176]);
            
		            val = _mm256_broadcast_ss(AB_val + 3159);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 3160);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 3161);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 3162);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 3163);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 3164);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 3165);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 3166);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 3167);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 3168);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 3169);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 3170);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 3171);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 3172);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 3173);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 3174);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 3175);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 3176);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 3177);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 3178);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 3179);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[15488 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 121))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[15488 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 128]);
            
		            val = _mm256_broadcast_ss(AB_val + 3180);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[512 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 512]);
            
		            val = _mm256_broadcast_ss(AB_val + 3181);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 3182);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 3183);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 3184);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 3185);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 3186);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 3187);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3200 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3200]);
            
		            val = _mm256_broadcast_ss(AB_val + 3188);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 3189);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 3190);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 3191);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 3192);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 3193);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 3194);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 3195);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 3196);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 3197);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 3198);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 3199);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 3200);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 3201);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 3202);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 3203);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 3204);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[15616 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 122))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[15616 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 3205);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 3206);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 3207);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 3208);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 3209);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 3210);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 3211);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 3212);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 3213);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 3214);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 3215);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 3216);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 3217);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 3218);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 3219);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 3220);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 3221);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 3222);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 3223);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 3224);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 3225);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 3226);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 3227);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 3228);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 3229);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6656 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6656]);
            
		            val = _mm256_broadcast_ss(AB_val + 3230);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 3231);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 3232);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 3233);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 3234);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7552 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7552]);
            
		            val = _mm256_broadcast_ss(AB_val + 3235);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 3236);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8064 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8064]);
            
		            val = _mm256_broadcast_ss(AB_val + 3237);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[15744 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 123))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[15744 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 256]);
            
		            val = _mm256_broadcast_ss(AB_val + 3238);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 3239);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1664 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1664]);
            
		            val = _mm256_broadcast_ss(AB_val + 3240);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 3241);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 3242);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3456 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3456]);
            
		            val = _mm256_broadcast_ss(AB_val + 3243);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 3244);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 3245);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4352 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4352]);
            
		            val = _mm256_broadcast_ss(AB_val + 3246);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 3247);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 3248);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 3249);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 3250);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 3251);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 3252);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 3253);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 3254);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 3255);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 3256);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7424 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7424]);
            
		            val = _mm256_broadcast_ss(AB_val + 3257);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 3258);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[15872 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 124))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[15872 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[768 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 768]);
            
		            val = _mm256_broadcast_ss(AB_val + 3259);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 3260);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1152 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1152]);
            
		            val = _mm256_broadcast_ss(AB_val + 3261);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 3262);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 3263);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2048 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2048]);
            
		            val = _mm256_broadcast_ss(AB_val + 3264);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 3265);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 3266);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 3267);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 3268);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 3269);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 3270);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3328 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3328]);
            
		            val = _mm256_broadcast_ss(AB_val + 3271);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 3272);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 3273);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 3274);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4224 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4224]);
            
		            val = _mm256_broadcast_ss(AB_val + 3275);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4608 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4608]);
            
		            val = _mm256_broadcast_ss(AB_val + 3276);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 3277);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 3278);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5760 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5760]);
            
		            val = _mm256_broadcast_ss(AB_val + 3279);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 3280);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6144 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6144]);
            
		            val = _mm256_broadcast_ss(AB_val + 3281);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 3282);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 3283);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7040 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7040]);
            
		            val = _mm256_broadcast_ss(AB_val + 3284);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 3285);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 3286);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 3287);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7936 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7936]);
            
		            val = _mm256_broadcast_ss(AB_val + 3288);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[16000 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 125))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[16000 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[0 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 0]);
            
		            val = _mm256_broadcast_ss(AB_val + 3289);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[896 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 896]);
            
		            val = _mm256_broadcast_ss(AB_val + 3290);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 3291);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1280 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1280]);
            
		            val = _mm256_broadcast_ss(AB_val + 3292);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1408 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1408]);
            
		            val = _mm256_broadcast_ss(AB_val + 3293);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1536 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1536]);
            
		            val = _mm256_broadcast_ss(AB_val + 3294);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 3295);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2432 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2432]);
            
		            val = _mm256_broadcast_ss(AB_val + 3296);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2944 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2944]);
            
		            val = _mm256_broadcast_ss(AB_val + 3297);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 3298);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3584 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3584]);
            
		            val = _mm256_broadcast_ss(AB_val + 3299);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3712 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3712]);
            
		            val = _mm256_broadcast_ss(AB_val + 3300);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3840 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3840]);
            
		            val = _mm256_broadcast_ss(AB_val + 3301);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4096 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4096]);
            
		            val = _mm256_broadcast_ss(AB_val + 3302);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 3303);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4992 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4992]);
            
		            val = _mm256_broadcast_ss(AB_val + 3304);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 3305);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5504 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5504]);
            
		            val = _mm256_broadcast_ss(AB_val + 3306);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 3307);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6016 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6016]);
            
		            val = _mm256_broadcast_ss(AB_val + 3308);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6528 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6528]);
            
		            val = _mm256_broadcast_ss(AB_val + 3309);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6784 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6784]);
            
		            val = _mm256_broadcast_ss(AB_val + 3310);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7168 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7168]);
            
		            val = _mm256_broadcast_ss(AB_val + 3311);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7680 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7680]);
            
		            val = _mm256_broadcast_ss(AB_val + 3312);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[16128 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 126))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[16128 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[384 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 384]);
            
		            val = _mm256_broadcast_ss(AB_val + 3313);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[640 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 640]);
            
		            val = _mm256_broadcast_ss(AB_val + 3314);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1024 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1024]);
            
		            val = _mm256_broadcast_ss(AB_val + 3315);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1792 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1792]);
            
		            val = _mm256_broadcast_ss(AB_val + 3316);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[1920 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 1920]);
            
		            val = _mm256_broadcast_ss(AB_val + 3317);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2560 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2560]);
            
		            val = _mm256_broadcast_ss(AB_val + 3318);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2688 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2688]);
            
		            val = _mm256_broadcast_ss(AB_val + 3319);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[2816 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 2816]);
            
		            val = _mm256_broadcast_ss(AB_val + 3320);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3072 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3072]);
            
		            val = _mm256_broadcast_ss(AB_val + 3321);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[3968 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 3968]);
            
		            val = _mm256_broadcast_ss(AB_val + 3322);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4480 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4480]);
            
		            val = _mm256_broadcast_ss(AB_val + 3323);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4736 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4736]);
            
		            val = _mm256_broadcast_ss(AB_val + 3324);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[4864 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 4864]);
            
		            val = _mm256_broadcast_ss(AB_val + 3325);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5120 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5120]);
            
		            val = _mm256_broadcast_ss(AB_val + 3326);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5248 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5248]);
            
		            val = _mm256_broadcast_ss(AB_val + 3327);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5632 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5632]);
            
		            val = _mm256_broadcast_ss(AB_val + 3328);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[5888 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 5888]);
            
		            val = _mm256_broadcast_ss(AB_val + 3329);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6272 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6272]);
            
		            val = _mm256_broadcast_ss(AB_val + 3330);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[6912 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 6912]);
            
		            val = _mm256_broadcast_ss(AB_val + 3331);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7296 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7296]);
            
		            val = _mm256_broadcast_ss(AB_val + 3332);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[7808 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 7808]);
            
		            val = _mm256_broadcast_ss(AB_val + 3333);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[16256 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 127))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[16256 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 3334);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 3335);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 3336);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 3337);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 3338);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 3339);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 3340);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 3341);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 3342);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 3343);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 3344);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 3345);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 3346);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 3347);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 3348);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 3349);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 3350);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 3351);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 3352);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 3353);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 3354);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 3355);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 3356);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[0 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 0))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[0 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 3357);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 3358);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 3359);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 3360);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 3361);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 3362);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 3363);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 3364);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 3365);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 3366);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 3367);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 3368);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 3369);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 3370);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 3371);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 3372);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 3373);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 3374);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 3375);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 3376);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 3377);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 3378);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 3379);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 3380);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 3381);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[128 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 1))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[128 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 3382);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 3383);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 3384);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 3385);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 3386);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 3387);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 3388);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 3389);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 3390);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 3391);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 3392);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 3393);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 3394);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 3395);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 3396);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 3397);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 3398);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 3399);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 3400);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 3401);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 3402);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 3403);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 3404);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 3405);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 3406);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 3407);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[256 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 2))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[256 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 3408);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 3409);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 3410);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 3411);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 3412);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 3413);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 3414);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 3415);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 3416);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 3417);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 3418);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 3419);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 3420);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 3421);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 3422);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 3423);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 3424);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 3425);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 3426);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 3427);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 3428);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 3429);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 3430);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[384 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 3))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[384 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 3431);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 3432);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 3433);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 3434);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 3435);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 3436);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 3437);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 3438);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 3439);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 3440);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 3441);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 3442);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 3443);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 3444);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 3445);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 3446);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 3447);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 3448);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 3449);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 3450);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 3451);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 3452);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 3453);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 3454);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 3455);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[512 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 4))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[512 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 3456);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 3457);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 3458);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 3459);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 3460);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 3461);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 3462);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 3463);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 3464);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 3465);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 3466);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 3467);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 3468);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 3469);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 3470);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 3471);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 3472);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 3473);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 3474);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 3475);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 3476);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 3477);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 3478);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 3479);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 3480);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 3481);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[640 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 5))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[640 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 3482);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 3483);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 3484);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 3485);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 3486);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 3487);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 3488);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 3489);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 3490);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 3491);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 3492);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 3493);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 3494);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 3495);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 3496);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 3497);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 3498);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 3499);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 3500);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 3501);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 3502);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 3503);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 3504);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 3505);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 3506);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 3507);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 3508);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[768 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 6))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[768 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 3509);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 3510);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 3511);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 3512);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 3513);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 3514);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 3515);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 3516);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 3517);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 3518);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 3519);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 3520);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 3521);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 3522);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 3523);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 3524);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 3525);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 3526);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 3527);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 3528);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 3529);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 3530);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 3531);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 3532);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 3533);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 3534);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 3535);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[896 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 7))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[896 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 3536);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 3537);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 3538);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 3539);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 3540);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 3541);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 3542);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 3543);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 3544);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 3545);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 3546);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 3547);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 3548);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 3549);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 3550);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 3551);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 3552);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 3553);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 3554);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 3555);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 3556);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 3557);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 3558);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 3559);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 3560);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 3561);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 3562);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 3563);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 3564);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[1024 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 8))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[1024 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 3565);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 3566);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 3567);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 3568);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 3569);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 3570);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 3571);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 3572);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 3573);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 3574);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 3575);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 3576);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 3577);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 3578);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 3579);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 3580);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 3581);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 3582);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 3583);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 3584);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 3585);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 3586);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 3587);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 3588);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[1152 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 9))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[1152 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 3589);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 3590);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 3591);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 3592);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 3593);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 3594);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 3595);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 3596);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 3597);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 3598);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 3599);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 3600);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 3601);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 3602);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 3603);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 3604);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 3605);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 3606);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 3607);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 3608);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 3609);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 3610);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 3611);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 3612);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 3613);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[1280 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 10))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[1280 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 3614);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 3615);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 3616);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 3617);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 3618);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 3619);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 3620);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 3621);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 3622);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 3623);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 3624);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 3625);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 3626);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 3627);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 3628);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 3629);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 3630);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 3631);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 3632);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 3633);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 3634);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 3635);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 3636);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 3637);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 3638);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 3639);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 3640);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 3641);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 3642);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 3643);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[1408 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 11))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[1408 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 3644);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 3645);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 3646);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 3647);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 3648);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 3649);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 3650);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 3651);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 3652);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 3653);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 3654);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 3655);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 3656);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 3657);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 3658);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 3659);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 3660);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 3661);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 3662);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 3663);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 3664);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[1536 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 12))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[1536 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 3665);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 3666);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 3667);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 3668);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 3669);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 3670);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 3671);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 3672);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 3673);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 3674);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 3675);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 3676);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 3677);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 3678);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 3679);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 3680);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 3681);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 3682);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 3683);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 3684);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 3685);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 3686);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[1664 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 13))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[1664 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 3687);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 3688);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 3689);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 3690);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 3691);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 3692);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 3693);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 3694);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 3695);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 3696);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 3697);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 3698);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 3699);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 3700);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 3701);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 3702);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 3703);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 3704);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 3705);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 3706);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 3707);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 3708);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 3709);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 3710);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 3711);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 3712);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 3713);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 3714);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[1792 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 14))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[1792 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 3715);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 3716);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 3717);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 3718);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 3719);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 3720);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 3721);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 3722);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 3723);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 3724);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 3725);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 3726);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 3727);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 3728);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 3729);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 3730);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 3731);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 3732);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 3733);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 3734);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 3735);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 3736);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[1920 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 15))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[1920 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 3737);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 3738);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 3739);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 3740);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 3741);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 3742);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 3743);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 3744);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 3745);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 3746);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 3747);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 3748);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 3749);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 3750);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 3751);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 3752);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 3753);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 3754);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 3755);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 3756);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 3757);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 3758);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[2048 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 16))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[2048 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 3759);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 3760);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 3761);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 3762);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 3763);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 3764);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 3765);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 3766);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 3767);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 3768);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 3769);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 3770);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 3771);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 3772);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 3773);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 3774);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 3775);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 3776);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 3777);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 3778);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 3779);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 3780);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 3781);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 3782);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 3783);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 3784);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 3785);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 3786);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 3787);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[2176 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 17))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[2176 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 3788);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 3789);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 3790);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 3791);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 3792);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 3793);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 3794);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 3795);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 3796);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 3797);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 3798);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 3799);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 3800);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 3801);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 3802);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 3803);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 3804);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 3805);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 3806);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 3807);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 3808);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 3809);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 3810);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 3811);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[2304 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 18))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[2304 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 3812);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 3813);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 3814);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 3815);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 3816);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 3817);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 3818);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 3819);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 3820);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 3821);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 3822);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 3823);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 3824);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 3825);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 3826);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 3827);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 3828);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 3829);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 3830);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 3831);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 3832);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 3833);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 3834);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 3835);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[2432 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 19))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[2432 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 3836);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 3837);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 3838);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 3839);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 3840);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 3841);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 3842);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 3843);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 3844);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 3845);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 3846);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 3847);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 3848);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 3849);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 3850);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 3851);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 3852);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 3853);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 3854);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 3855);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 3856);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 3857);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 3858);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 3859);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 3860);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[2560 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 20))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[2560 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 3861);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 3862);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 3863);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 3864);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 3865);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 3866);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 3867);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 3868);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 3869);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 3870);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 3871);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 3872);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 3873);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 3874);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 3875);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 3876);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 3877);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 3878);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 3879);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 3880);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 3881);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 3882);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 3883);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 3884);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 3885);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 3886);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 3887);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[2688 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 21))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[2688 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 3888);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 3889);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 3890);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 3891);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 3892);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 3893);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 3894);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 3895);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 3896);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 3897);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 3898);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 3899);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 3900);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 3901);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 3902);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 3903);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[2816 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 22))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[2816 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 3904);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 3905);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 3906);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 3907);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 3908);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 3909);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 3910);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 3911);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 3912);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 3913);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 3914);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 3915);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 3916);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 3917);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 3918);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 3919);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 3920);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 3921);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 3922);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 3923);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 3924);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 3925);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 3926);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 3927);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 3928);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 3929);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 3930);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[2944 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 23))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[2944 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 3931);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 3932);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 3933);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 3934);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 3935);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 3936);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 3937);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 3938);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 3939);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 3940);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 3941);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 3942);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 3943);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 3944);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 3945);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 3946);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 3947);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 3948);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 3949);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 3950);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 3951);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 3952);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 3953);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 3954);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 3955);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 3956);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 3957);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 3958);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 3959);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[3072 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 24))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[3072 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 3960);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 3961);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 3962);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 3963);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 3964);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 3965);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 3966);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 3967);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 3968);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 3969);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 3970);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 3971);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 3972);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 3973);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 3974);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 3975);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 3976);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 3977);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 3978);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 3979);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 3980);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 3981);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 3982);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 3983);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[3200 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 25))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[3200 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 3984);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 3985);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 3986);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 3987);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 3988);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 3989);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 3990);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 3991);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 3992);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 3993);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 3994);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 3995);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 3996);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 3997);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 3998);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 3999);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 4000);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 4001);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 4002);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 4003);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 4004);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 4005);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 4006);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 4007);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 4008);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 4009);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[3328 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 26))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[3328 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 4010);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 4011);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 4012);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 4013);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 4014);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 4015);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 4016);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 4017);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 4018);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 4019);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 4020);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 4021);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 4022);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 4023);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 4024);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 4025);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 4026);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 4027);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 4028);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 4029);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 4030);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 4031);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 4032);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 4033);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 4034);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[3456 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 27))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[3456 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 4035);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 4036);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 4037);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 4038);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 4039);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 4040);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 4041);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 4042);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 4043);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 4044);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 4045);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 4046);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 4047);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 4048);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 4049);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 4050);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 4051);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 4052);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 4053);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 4054);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 4055);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 4056);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 4057);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 4058);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 4059);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 4060);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 4061);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[3584 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 28))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[3584 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 4062);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 4063);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 4064);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 4065);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 4066);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 4067);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 4068);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 4069);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 4070);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 4071);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 4072);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 4073);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 4074);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 4075);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 4076);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 4077);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 4078);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 4079);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 4080);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 4081);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 4082);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 4083);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 4084);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 4085);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[3712 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 29))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[3712 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 4086);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 4087);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 4088);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 4089);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 4090);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 4091);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 4092);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 4093);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 4094);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 4095);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 4096);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 4097);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 4098);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 4099);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 4100);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 4101);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 4102);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 4103);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 4104);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 4105);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 4106);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 4107);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 4108);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[3840 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 30))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[3840 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 4109);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 4110);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 4111);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 4112);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 4113);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 4114);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 4115);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 4116);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 4117);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 4118);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 4119);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 4120);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 4121);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 4122);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 4123);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 4124);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 4125);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 4126);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 4127);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 4128);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 4129);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 4130);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 4131);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 4132);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 4133);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[3968 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 31))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[3968 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 4134);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 4135);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 4136);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 4137);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 4138);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 4139);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 4140);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 4141);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 4142);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 4143);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 4144);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 4145);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 4146);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 4147);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 4148);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 4149);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 4150);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 4151);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 4152);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 4153);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 4154);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 4155);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 4156);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 4157);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 4158);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[4096 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 32))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[4096 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 4159);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 4160);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 4161);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 4162);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 4163);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 4164);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 4165);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 4166);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 4167);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 4168);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 4169);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 4170);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 4171);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 4172);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 4173);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 4174);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 4175);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 4176);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 4177);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 4178);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 4179);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 4180);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 4181);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 4182);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 4183);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 4184);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 4185);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 4186);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 4187);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 4188);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[4224 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 33))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[4224 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 4189);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 4190);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 4191);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 4192);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 4193);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 4194);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 4195);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 4196);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 4197);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 4198);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 4199);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 4200);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 4201);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 4202);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 4203);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 4204);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 4205);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 4206);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 4207);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 4208);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 4209);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 4210);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 4211);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[4352 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 34))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[4352 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 4212);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 4213);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 4214);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 4215);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 4216);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 4217);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 4218);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 4219);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 4220);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 4221);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 4222);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 4223);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 4224);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 4225);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 4226);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 4227);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 4228);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 4229);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 4230);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 4231);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 4232);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 4233);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 4234);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 4235);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 4236);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[4480 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 35))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[4480 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 4237);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 4238);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 4239);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 4240);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 4241);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 4242);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 4243);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 4244);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 4245);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 4246);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 4247);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 4248);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 4249);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 4250);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 4251);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 4252);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 4253);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 4254);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 4255);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 4256);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 4257);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 4258);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 4259);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 4260);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 4261);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[4608 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 36))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[4608 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 4262);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 4263);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 4264);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 4265);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 4266);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 4267);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 4268);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 4269);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 4270);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 4271);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 4272);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 4273);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 4274);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 4275);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 4276);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 4277);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 4278);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 4279);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 4280);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 4281);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 4282);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 4283);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 4284);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 4285);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 4286);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[4736 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 37))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[4736 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 4287);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 4288);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 4289);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 4290);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 4291);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 4292);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 4293);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 4294);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 4295);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 4296);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 4297);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 4298);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 4299);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 4300);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 4301);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 4302);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 4303);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 4304);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 4305);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 4306);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 4307);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 4308);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 4309);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[4864 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 38))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[4864 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 4310);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 4311);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 4312);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 4313);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 4314);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 4315);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 4316);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 4317);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 4318);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 4319);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 4320);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 4321);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 4322);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 4323);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 4324);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 4325);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 4326);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 4327);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 4328);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 4329);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 4330);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 4331);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 4332);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 4333);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 4334);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 4335);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[4992 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 39))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[4992 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 4336);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 4337);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 4338);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 4339);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 4340);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 4341);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 4342);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 4343);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 4344);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 4345);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 4346);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 4347);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 4348);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 4349);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 4350);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 4351);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 4352);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 4353);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 4354);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 4355);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 4356);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 4357);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 4358);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 4359);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 4360);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 4361);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 4362);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[5120 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 40))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[5120 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 4363);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 4364);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 4365);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 4366);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 4367);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 4368);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 4369);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 4370);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 4371);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 4372);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 4373);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 4374);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 4375);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 4376);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 4377);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 4378);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 4379);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 4380);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 4381);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 4382);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 4383);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 4384);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 4385);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 4386);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 4387);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 4388);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[5248 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 41))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[5248 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 4389);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 4390);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 4391);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 4392);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 4393);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 4394);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 4395);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 4396);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 4397);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 4398);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 4399);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 4400);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 4401);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 4402);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 4403);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 4404);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 4405);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 4406);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 4407);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 4408);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 4409);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 4410);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 4411);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 4412);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 4413);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 4414);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 4415);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 4416);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 4417);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 4418);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 4419);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[5376 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 42))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[5376 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 4420);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 4421);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 4422);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 4423);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 4424);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 4425);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 4426);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 4427);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 4428);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 4429);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 4430);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 4431);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 4432);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 4433);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 4434);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 4435);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 4436);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 4437);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 4438);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 4439);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 4440);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 4441);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 4442);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 4443);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 4444);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[5504 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 43))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[5504 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 4445);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 4446);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 4447);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 4448);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 4449);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 4450);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 4451);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 4452);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 4453);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 4454);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 4455);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 4456);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 4457);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 4458);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 4459);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 4460);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 4461);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 4462);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 4463);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 4464);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 4465);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 4466);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 4467);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 4468);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 4469);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 4470);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 4471);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 4472);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 4473);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 4474);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 4475);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[5632 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 44))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[5632 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 4476);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 4477);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 4478);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 4479);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 4480);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 4481);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 4482);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 4483);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 4484);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 4485);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 4486);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 4487);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 4488);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 4489);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 4490);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 4491);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 4492);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 4493);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 4494);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 4495);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 4496);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 4497);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 4498);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 4499);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 4500);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 4501);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 4502);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[5760 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 45))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[5760 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 4503);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 4504);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 4505);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 4506);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 4507);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 4508);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 4509);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 4510);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 4511);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 4512);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 4513);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 4514);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 4515);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 4516);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 4517);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 4518);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 4519);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 4520);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 4521);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 4522);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 4523);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 4524);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 4525);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 4526);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 4527);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 4528);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 4529);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 4530);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 4531);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 4532);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[5888 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 46))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[5888 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 4533);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 4534);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 4535);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 4536);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 4537);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 4538);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 4539);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 4540);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 4541);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 4542);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 4543);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 4544);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 4545);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 4546);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 4547);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 4548);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 4549);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 4550);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 4551);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 4552);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 4553);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 4554);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 4555);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 4556);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 4557);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 4558);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[6016 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 47))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[6016 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 4559);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 4560);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 4561);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 4562);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 4563);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 4564);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 4565);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 4566);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 4567);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 4568);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 4569);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 4570);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 4571);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 4572);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 4573);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 4574);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 4575);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 4576);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 4577);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 4578);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 4579);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 4580);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 4581);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 4582);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[6144 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 48))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[6144 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 4583);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 4584);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 4585);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 4586);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 4587);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 4588);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 4589);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 4590);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 4591);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 4592);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 4593);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 4594);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 4595);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 4596);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 4597);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 4598);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 4599);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 4600);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 4601);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 4602);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 4603);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 4604);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 4605);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 4606);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 4607);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[6272 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 49))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[6272 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 4608);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 4609);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 4610);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 4611);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 4612);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 4613);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 4614);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 4615);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 4616);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 4617);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 4618);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 4619);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 4620);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 4621);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 4622);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 4623);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 4624);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 4625);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 4626);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 4627);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 4628);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 4629);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[6400 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 50))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[6400 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 4630);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 4631);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 4632);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 4633);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 4634);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 4635);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 4636);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 4637);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 4638);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 4639);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 4640);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 4641);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 4642);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 4643);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 4644);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 4645);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 4646);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 4647);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 4648);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 4649);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 4650);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 4651);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 4652);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 4653);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[6528 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 51))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[6528 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 4654);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 4655);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 4656);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 4657);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 4658);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 4659);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 4660);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 4661);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 4662);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 4663);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 4664);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 4665);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 4666);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 4667);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 4668);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 4669);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 4670);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 4671);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 4672);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 4673);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 4674);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 4675);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 4676);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 4677);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 4678);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 4679);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[6656 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 52))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[6656 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 4680);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 4681);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 4682);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 4683);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 4684);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 4685);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 4686);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 4687);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 4688);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 4689);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 4690);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 4691);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 4692);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 4693);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 4694);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 4695);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 4696);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 4697);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 4698);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 4699);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 4700);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 4701);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 4702);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 4703);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 4704);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 4705);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[6784 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 53))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[6784 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 4706);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 4707);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 4708);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 4709);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 4710);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 4711);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 4712);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 4713);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 4714);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 4715);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 4716);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 4717);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 4718);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 4719);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 4720);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 4721);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 4722);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 4723);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 4724);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 4725);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 4726);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 4727);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 4728);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 4729);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 4730);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[6912 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 54))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[6912 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 4731);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 4732);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 4733);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 4734);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 4735);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 4736);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 4737);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 4738);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 4739);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 4740);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 4741);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 4742);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 4743);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 4744);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 4745);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 4746);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 4747);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 4748);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 4749);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 4750);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 4751);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[7040 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 55))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[7040 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 4752);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 4753);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 4754);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 4755);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 4756);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 4757);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 4758);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 4759);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 4760);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 4761);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 4762);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 4763);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 4764);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 4765);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 4766);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 4767);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 4768);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 4769);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 4770);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 4771);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[7168 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 56))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[7168 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 4772);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 4773);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 4774);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 4775);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 4776);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 4777);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 4778);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 4779);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 4780);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 4781);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 4782);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 4783);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 4784);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 4785);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 4786);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 4787);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 4788);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 4789);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 4790);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 4791);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 4792);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 4793);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 4794);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 4795);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 4796);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 4797);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 4798);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 4799);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 4800);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[7296 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 57))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[7296 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 4801);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 4802);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 4803);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 4804);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 4805);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 4806);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 4807);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 4808);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 4809);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 4810);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 4811);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 4812);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 4813);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 4814);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 4815);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 4816);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 4817);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 4818);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 4819);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 4820);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 4821);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 4822);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 4823);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 4824);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 4825);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 4826);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 4827);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 4828);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[7424 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 58))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[7424 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 4829);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 4830);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 4831);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 4832);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 4833);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 4834);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 4835);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 4836);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 4837);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 4838);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 4839);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 4840);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 4841);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 4842);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 4843);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 4844);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 4845);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 4846);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 4847);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 4848);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 4849);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[7552 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 59))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[7552 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 4850);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 4851);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 4852);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 4853);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 4854);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 4855);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 4856);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 4857);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 4858);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 4859);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 4860);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 4861);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 4862);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 4863);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 4864);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 4865);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 4866);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 4867);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 4868);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 4869);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 4870);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 4871);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 4872);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 4873);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 4874);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 4875);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 4876);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 4877);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 4878);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[7680 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 60))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[7680 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 4879);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 4880);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 4881);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 4882);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 4883);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 4884);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 4885);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 4886);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 4887);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 4888);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 4889);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 4890);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 4891);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 4892);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 4893);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 4894);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 4895);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 4896);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 4897);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 4898);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 4899);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 4900);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 4901);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 4902);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 4903);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 4904);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[7808 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 61))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[7808 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 4905);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 4906);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 4907);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 4908);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 4909);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 4910);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 4911);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 4912);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 4913);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 4914);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 4915);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 4916);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 4917);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 4918);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 4919);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 4920);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 4921);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 4922);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 4923);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 4924);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 4925);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 4926);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 4927);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[7936 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 62))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[7936 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 4928);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 4929);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 4930);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 4931);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 4932);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 4933);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 4934);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 4935);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 4936);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 4937);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 4938);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 4939);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 4940);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 4941);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 4942);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 4943);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 4944);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 4945);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 4946);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 4947);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 4948);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 4949);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 4950);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 4951);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 4952);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 4953);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[8064 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 63))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[8064 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 4954);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 4955);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 4956);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 4957);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 4958);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 4959);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 4960);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 4961);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 4962);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 4963);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 4964);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 4965);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 4966);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 4967);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 4968);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 4969);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 4970);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 4971);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 4972);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 4973);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 4974);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 4975);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 4976);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 4977);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 4978);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 4979);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 4980);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 4981);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 4982);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 4983);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 4984);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[8192 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 64))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[8192 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 4985);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 4986);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 4987);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 4988);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 4989);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 4990);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 4991);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 4992);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 4993);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 4994);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 4995);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 4996);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 4997);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 4998);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 4999);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 5000);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 5001);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 5002);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 5003);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 5004);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 5005);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 5006);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 5007);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 5008);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 5009);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 5010);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 5011);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 5012);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 5013);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 5014);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 5015);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 5016);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 5017);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[8320 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 65))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[8320 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 5018);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 5019);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 5020);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 5021);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 5022);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 5023);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 5024);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 5025);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 5026);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 5027);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 5028);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 5029);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 5030);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 5031);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 5032);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 5033);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 5034);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 5035);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 5036);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 5037);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 5038);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 5039);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 5040);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 5041);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 5042);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[8448 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 66))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[8448 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 5043);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 5044);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 5045);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 5046);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 5047);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 5048);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 5049);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 5050);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 5051);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 5052);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 5053);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 5054);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 5055);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 5056);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 5057);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 5058);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 5059);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 5060);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 5061);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 5062);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 5063);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 5064);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 5065);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 5066);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 5067);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 5068);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 5069);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 5070);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[8576 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 67))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[8576 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 5071);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 5072);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 5073);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 5074);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 5075);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 5076);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 5077);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 5078);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 5079);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 5080);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 5081);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 5082);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 5083);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 5084);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 5085);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 5086);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 5087);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 5088);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 5089);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 5090);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 5091);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 5092);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 5093);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 5094);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 5095);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[8704 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 68))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[8704 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 5096);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 5097);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 5098);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 5099);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 5100);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 5101);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 5102);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 5103);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 5104);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 5105);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 5106);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 5107);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 5108);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 5109);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 5110);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 5111);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 5112);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 5113);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 5114);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 5115);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 5116);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 5117);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 5118);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 5119);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 5120);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 5121);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 5122);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 5123);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 5124);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 5125);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[8832 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 69))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[8832 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 5126);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 5127);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 5128);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 5129);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 5130);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 5131);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 5132);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 5133);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 5134);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 5135);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 5136);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 5137);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 5138);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 5139);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 5140);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 5141);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 5142);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 5143);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 5144);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 5145);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 5146);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 5147);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 5148);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 5149);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 5150);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 5151);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[8960 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 70))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[8960 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 5152);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 5153);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 5154);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 5155);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 5156);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 5157);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 5158);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 5159);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 5160);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 5161);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 5162);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 5163);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 5164);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 5165);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 5166);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 5167);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 5168);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 5169);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 5170);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 5171);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 5172);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 5173);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 5174);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 5175);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 5176);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 5177);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[9088 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 71))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[9088 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 5178);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 5179);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 5180);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 5181);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 5182);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 5183);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 5184);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 5185);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 5186);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 5187);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 5188);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 5189);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 5190);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 5191);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 5192);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 5193);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 5194);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 5195);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 5196);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 5197);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 5198);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 5199);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 5200);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 5201);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[9216 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 72))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[9216 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 5202);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 5203);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 5204);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 5205);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 5206);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 5207);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 5208);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 5209);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 5210);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 5211);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 5212);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 5213);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 5214);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 5215);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 5216);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 5217);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 5218);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 5219);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 5220);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 5221);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 5222);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 5223);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 5224);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 5225);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[9344 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 73))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[9344 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 5226);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 5227);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 5228);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 5229);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 5230);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 5231);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 5232);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 5233);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 5234);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 5235);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 5236);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 5237);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 5238);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 5239);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 5240);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 5241);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 5242);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 5243);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 5244);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 5245);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 5246);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 5247);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 5248);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[9472 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 74))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[9472 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 5249);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 5250);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 5251);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 5252);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 5253);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 5254);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 5255);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 5256);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 5257);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 5258);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 5259);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 5260);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 5261);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 5262);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 5263);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 5264);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 5265);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 5266);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 5267);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 5268);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 5269);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 5270);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 5271);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 5272);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 5273);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 5274);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 5275);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[9600 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 75))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[9600 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 5276);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 5277);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 5278);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 5279);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 5280);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 5281);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 5282);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 5283);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 5284);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 5285);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 5286);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 5287);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 5288);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 5289);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 5290);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 5291);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 5292);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 5293);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 5294);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 5295);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 5296);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 5297);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 5298);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 5299);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 5300);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 5301);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 5302);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[9728 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 76))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[9728 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 5303);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 5304);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 5305);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 5306);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 5307);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 5308);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 5309);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 5310);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 5311);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 5312);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 5313);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 5314);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 5315);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 5316);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 5317);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 5318);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 5319);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 5320);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 5321);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 5322);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 5323);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 5324);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 5325);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 5326);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 5327);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[9856 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 77))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[9856 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 5328);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 5329);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 5330);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 5331);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 5332);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 5333);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 5334);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 5335);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 5336);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 5337);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 5338);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 5339);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 5340);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 5341);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 5342);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 5343);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 5344);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 5345);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 5346);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 5347);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 5348);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 5349);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 5350);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 5351);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 5352);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 5353);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 5354);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 5355);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 5356);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 5357);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 5358);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 5359);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[9984 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 78))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[9984 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 5360);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 5361);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 5362);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 5363);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 5364);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 5365);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 5366);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 5367);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 5368);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 5369);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 5370);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 5371);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 5372);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 5373);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 5374);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 5375);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 5376);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 5377);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 5378);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 5379);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 5380);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 5381);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 5382);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 5383);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 5384);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 5385);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 5386);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 5387);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 5388);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 5389);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[10112 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 79))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[10112 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 5390);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 5391);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 5392);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 5393);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 5394);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 5395);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 5396);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 5397);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 5398);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 5399);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 5400);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 5401);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 5402);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 5403);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 5404);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 5405);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 5406);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 5407);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 5408);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 5409);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 5410);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 5411);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 5412);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 5413);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 5414);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 5415);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 5416);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 5417);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 5418);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[10240 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 80))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[10240 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 5419);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 5420);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 5421);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 5422);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 5423);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 5424);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 5425);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 5426);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 5427);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 5428);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 5429);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 5430);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 5431);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 5432);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 5433);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 5434);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 5435);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 5436);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 5437);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 5438);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 5439);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 5440);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 5441);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 5442);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 5443);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 5444);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 5445);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 5446);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 5447);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 5448);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 5449);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 5450);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[10368 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 81))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[10368 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 5451);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 5452);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 5453);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 5454);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 5455);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 5456);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 5457);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 5458);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 5459);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 5460);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 5461);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 5462);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 5463);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 5464);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 5465);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 5466);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 5467);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 5468);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 5469);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 5470);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 5471);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[10496 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 82))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[10496 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 5472);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 5473);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 5474);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 5475);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 5476);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 5477);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 5478);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 5479);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 5480);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 5481);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 5482);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 5483);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 5484);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 5485);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 5486);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 5487);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 5488);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 5489);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 5490);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 5491);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 5492);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 5493);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 5494);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 5495);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[10624 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 83))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[10624 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 5496);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 5497);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 5498);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 5499);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 5500);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 5501);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 5502);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 5503);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 5504);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 5505);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 5506);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 5507);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 5508);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 5509);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 5510);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 5511);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 5512);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 5513);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 5514);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 5515);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 5516);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 5517);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 5518);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 5519);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[10752 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 84))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[10752 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 5520);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 5521);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 5522);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 5523);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 5524);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 5525);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 5526);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 5527);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 5528);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 5529);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 5530);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 5531);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 5532);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 5533);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 5534);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 5535);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 5536);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 5537);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 5538);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 5539);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 5540);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 5541);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 5542);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 5543);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 5544);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 5545);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 5546);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 5547);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 5548);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[10880 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 85))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[10880 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 5549);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 5550);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 5551);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 5552);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 5553);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 5554);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 5555);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 5556);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 5557);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 5558);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 5559);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 5560);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 5561);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 5562);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 5563);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 5564);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 5565);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 5566);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 5567);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 5568);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 5569);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 5570);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 5571);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 5572);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 5573);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 5574);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 5575);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[11008 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 86))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[11008 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 5576);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 5577);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 5578);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 5579);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 5580);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 5581);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 5582);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 5583);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 5584);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 5585);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 5586);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 5587);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 5588);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 5589);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 5590);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 5591);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 5592);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 5593);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 5594);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 5595);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 5596);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 5597);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 5598);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 5599);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 5600);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 5601);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 5602);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 5603);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[11136 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 87))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[11136 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 5604);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 5605);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 5606);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 5607);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 5608);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 5609);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 5610);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 5611);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 5612);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 5613);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 5614);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 5615);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 5616);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 5617);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 5618);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 5619);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 5620);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 5621);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 5622);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 5623);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 5624);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 5625);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[11264 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 88))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[11264 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 5626);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 5627);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 5628);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 5629);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 5630);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 5631);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 5632);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 5633);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 5634);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 5635);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 5636);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 5637);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 5638);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 5639);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 5640);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 5641);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 5642);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 5643);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 5644);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 5645);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 5646);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 5647);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 5648);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 5649);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[11392 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 89))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[11392 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 5650);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 5651);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 5652);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 5653);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 5654);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 5655);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 5656);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 5657);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 5658);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 5659);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 5660);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 5661);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 5662);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 5663);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 5664);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 5665);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 5666);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 5667);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 5668);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 5669);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 5670);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 5671);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 5672);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 5673);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 5674);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 5675);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 5676);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[11520 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 90))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[11520 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 5677);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 5678);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 5679);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 5680);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 5681);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 5682);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 5683);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 5684);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 5685);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 5686);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 5687);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 5688);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 5689);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 5690);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 5691);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 5692);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 5693);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 5694);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 5695);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 5696);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 5697);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 5698);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 5699);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 5700);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 5701);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 5702);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[11648 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 91))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[11648 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 5703);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 5704);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 5705);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 5706);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 5707);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 5708);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 5709);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 5710);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 5711);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 5712);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 5713);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 5714);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 5715);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 5716);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 5717);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 5718);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 5719);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 5720);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 5721);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 5722);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 5723);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 5724);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 5725);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 5726);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 5727);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 5728);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[11776 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 92))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[11776 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 5729);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 5730);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 5731);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 5732);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 5733);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 5734);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 5735);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 5736);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 5737);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 5738);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 5739);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 5740);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 5741);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 5742);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 5743);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 5744);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 5745);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 5746);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 5747);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 5748);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 5749);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 5750);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 5751);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 5752);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 5753);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 5754);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 5755);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[11904 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 93))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[11904 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 5756);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 5757);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 5758);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 5759);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 5760);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 5761);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 5762);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 5763);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 5764);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 5765);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 5766);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 5767);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 5768);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 5769);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 5770);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 5771);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 5772);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 5773);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 5774);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 5775);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 5776);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 5777);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 5778);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 5779);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 5780);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 5781);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 5782);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 5783);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 5784);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 5785);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[12032 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 94))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[12032 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 5786);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 5787);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 5788);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 5789);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 5790);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 5791);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 5792);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 5793);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 5794);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 5795);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 5796);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 5797);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 5798);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 5799);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 5800);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 5801);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 5802);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 5803);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 5804);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 5805);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 5806);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 5807);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[12160 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 95))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[12160 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 5808);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 5809);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 5810);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 5811);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 5812);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 5813);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 5814);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 5815);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 5816);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 5817);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 5818);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 5819);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 5820);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 5821);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 5822);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 5823);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 5824);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 5825);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 5826);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 5827);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 5828);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 5829);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 5830);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 5831);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 5832);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 5833);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 5834);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 5835);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[12288 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 96))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[12288 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 5836);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 5837);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 5838);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 5839);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 5840);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 5841);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 5842);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 5843);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 5844);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 5845);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 5846);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 5847);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 5848);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 5849);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 5850);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 5851);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 5852);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 5853);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 5854);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 5855);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 5856);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 5857);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 5858);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 5859);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 5860);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 5861);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[12416 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 97))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[12416 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 5862);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 5863);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 5864);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 5865);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 5866);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 5867);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 5868);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 5869);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 5870);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 5871);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 5872);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 5873);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 5874);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 5875);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 5876);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 5877);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 5878);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 5879);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 5880);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 5881);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 5882);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 5883);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 5884);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[12544 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 98))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[12544 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 5885);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 5886);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 5887);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 5888);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 5889);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 5890);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 5891);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 5892);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 5893);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 5894);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 5895);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 5896);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 5897);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 5898);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 5899);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 5900);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 5901);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 5902);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 5903);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 5904);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 5905);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 5906);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 5907);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 5908);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 5909);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 5910);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[12672 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 99))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[12672 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 5911);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 5912);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 5913);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 5914);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 5915);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 5916);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 5917);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 5918);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 5919);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 5920);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 5921);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 5922);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 5923);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 5924);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 5925);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 5926);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 5927);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 5928);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 5929);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 5930);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 5931);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 5932);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 5933);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[12800 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 100))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[12800 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 5934);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 5935);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 5936);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 5937);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 5938);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 5939);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 5940);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 5941);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 5942);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 5943);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 5944);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 5945);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 5946);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 5947);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 5948);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 5949);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 5950);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 5951);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 5952);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 5953);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 5954);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 5955);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 5956);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 5957);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[12928 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 101))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[12928 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 5958);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 5959);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 5960);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 5961);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 5962);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 5963);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 5964);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 5965);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 5966);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 5967);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 5968);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 5969);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 5970);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 5971);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 5972);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 5973);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 5974);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 5975);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 5976);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 5977);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 5978);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 5979);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 5980);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 5981);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 5982);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 5983);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 5984);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 5985);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 5986);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 5987);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[13056 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 102))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[13056 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 5988);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 5989);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 5990);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 5991);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 5992);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 5993);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 5994);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 5995);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 5996);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 5997);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 5998);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 5999);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 6000);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 6001);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 6002);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 6003);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 6004);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 6005);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 6006);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 6007);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 6008);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 6009);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[13184 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 103))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[13184 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 6010);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 6011);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 6012);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 6013);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 6014);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 6015);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 6016);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 6017);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 6018);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 6019);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 6020);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 6021);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 6022);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 6023);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 6024);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 6025);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 6026);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 6027);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 6028);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 6029);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 6030);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 6031);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[13312 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 104))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[13312 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 6032);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 6033);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 6034);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 6035);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 6036);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 6037);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 6038);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 6039);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 6040);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 6041);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 6042);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 6043);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 6044);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 6045);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 6046);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 6047);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 6048);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 6049);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 6050);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 6051);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 6052);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[13440 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 105))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[13440 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 6053);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 6054);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 6055);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 6056);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 6057);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 6058);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 6059);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 6060);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 6061);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 6062);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 6063);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 6064);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 6065);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 6066);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 6067);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 6068);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 6069);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 6070);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 6071);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 6072);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 6073);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 6074);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 6075);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[13568 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 106))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[13568 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 6076);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 6077);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 6078);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 6079);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 6080);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 6081);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 6082);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 6083);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 6084);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 6085);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 6086);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 6087);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 6088);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 6089);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 6090);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 6091);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 6092);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 6093);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 6094);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[13696 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 107))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[13696 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 6095);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 6096);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 6097);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 6098);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 6099);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 6100);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 6101);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 6102);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 6103);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 6104);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 6105);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 6106);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 6107);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 6108);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 6109);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 6110);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 6111);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 6112);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 6113);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 6114);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 6115);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[13824 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 108))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[13824 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 6116);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 6117);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 6118);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 6119);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 6120);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 6121);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 6122);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 6123);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 6124);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 6125);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 6126);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 6127);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 6128);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 6129);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 6130);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 6131);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 6132);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 6133);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 6134);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 6135);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 6136);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 6137);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 6138);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[13952 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 109))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[13952 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 6139);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 6140);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 6141);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 6142);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 6143);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 6144);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 6145);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 6146);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 6147);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 6148);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 6149);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 6150);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 6151);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 6152);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 6153);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 6154);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 6155);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 6156);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 6157);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 6158);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[14080 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 110))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[14080 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 6159);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 6160);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 6161);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 6162);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 6163);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 6164);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 6165);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 6166);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 6167);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 6168);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 6169);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 6170);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 6171);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 6172);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 6173);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 6174);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 6175);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 6176);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 6177);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 6178);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 6179);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 6180);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 6181);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 6182);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 6183);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 6184);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 6185);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 6186);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 6187);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 6188);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 6189);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 6190);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[14208 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 111))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[14208 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 6191);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 6192);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 6193);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 6194);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 6195);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 6196);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 6197);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 6198);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 6199);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 6200);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 6201);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 6202);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 6203);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 6204);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 6205);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 6206);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 6207);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 6208);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 6209);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 6210);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 6211);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 6212);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 6213);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 6214);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 6215);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 6216);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 6217);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 6218);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 6219);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 6220);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[14336 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 112))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[14336 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 6221);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 6222);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 6223);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 6224);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 6225);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 6226);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 6227);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 6228);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 6229);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 6230);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 6231);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 6232);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 6233);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 6234);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 6235);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 6236);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 6237);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 6238);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 6239);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 6240);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 6241);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 6242);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 6243);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 6244);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 6245);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[14464 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 113))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[14464 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 6246);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 6247);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 6248);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 6249);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 6250);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 6251);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 6252);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 6253);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 6254);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 6255);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 6256);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 6257);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 6258);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 6259);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 6260);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 6261);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 6262);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 6263);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 6264);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 6265);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 6266);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 6267);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 6268);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 6269);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 6270);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 6271);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 6272);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 6273);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[14592 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 114))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[14592 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 6274);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 6275);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 6276);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 6277);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 6278);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 6279);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 6280);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 6281);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 6282);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 6283);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 6284);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 6285);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 6286);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 6287);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 6288);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 6289);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 6290);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 6291);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 6292);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 6293);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 6294);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 6295);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 6296);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 6297);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 6298);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 6299);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 6300);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 6301);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 6302);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 6303);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 6304);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 6305);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 6306);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[14720 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 115))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[14720 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 6307);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 6308);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 6309);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 6310);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 6311);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 6312);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 6313);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 6314);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 6315);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 6316);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 6317);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 6318);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 6319);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 6320);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 6321);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 6322);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 6323);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 6324);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 6325);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 6326);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 6327);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 6328);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 6329);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 6330);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 6331);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 6332);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 6333);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 6334);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 6335);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 6336);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 6337);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 6338);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[14848 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 116))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[14848 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 6339);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 6340);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 6341);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 6342);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 6343);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 6344);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 6345);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 6346);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 6347);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 6348);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 6349);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 6350);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 6351);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 6352);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 6353);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 6354);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 6355);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 6356);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 6357);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 6358);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 6359);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 6360);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 6361);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 6362);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 6363);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[14976 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 117))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[14976 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 6364);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 6365);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 6366);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 6367);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 6368);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 6369);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 6370);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 6371);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 6372);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 6373);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 6374);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 6375);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 6376);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 6377);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 6378);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 6379);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 6380);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 6381);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[15104 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 118))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[15104 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 6382);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 6383);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 6384);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 6385);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 6386);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 6387);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 6388);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 6389);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 6390);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 6391);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 6392);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 6393);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 6394);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 6395);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 6396);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 6397);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 6398);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 6399);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 6400);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 6401);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 6402);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 6403);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 6404);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 6405);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 6406);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[15232 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 119))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[15232 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 6407);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 6408);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 6409);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 6410);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 6411);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 6412);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 6413);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 6414);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 6415);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 6416);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 6417);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 6418);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 6419);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 6420);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 6421);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 6422);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 6423);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 6424);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 6425);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 6426);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14336 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14336]);
            
		            val = _mm256_broadcast_ss(AB_val + 6427);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 6428);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 6429);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 6430);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 6431);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 6432);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 6433);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[15360 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 120))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[15360 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 6434);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 6435);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 6436);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 6437);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 6438);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 6439);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 6440);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 6441);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 6442);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10496 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10496]);
            
		            val = _mm256_broadcast_ss(AB_val + 6443);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 6444);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 6445);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 6446);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 6447);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 6448);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 6449);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 6450);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 6451);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 6452);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 6453);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 6454);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 6455);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 6456);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 6457);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 6458);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 6459);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 6460);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 6461);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 6462);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[15488 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 121))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[15488 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 6463);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 6464);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 6465);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 6466);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 6467);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 6468);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10752 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10752]);
            
		            val = _mm256_broadcast_ss(AB_val + 6469);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 6470);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 6471);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 6472);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 6473);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 6474);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 6475);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 6476);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 6477);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 6478);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 6479);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15360 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15360]);
            
		            val = _mm256_broadcast_ss(AB_val + 6480);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 6481);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[15616 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 122))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[15616 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 6482);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 6483);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 6484);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 6485);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 6486);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 6487);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 6488);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 6489);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 6490);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 6491);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 6492);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 6493);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 6494);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 6495);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 6496);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12288 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12288]);
            
		            val = _mm256_broadcast_ss(AB_val + 6497);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 6498);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 6499);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 6500);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 6501);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13824 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13824]);
            
		            val = _mm256_broadcast_ss(AB_val + 6502);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 6503);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 6504);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 6505);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 6506);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 6507);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[15744 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 123))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[15744 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 6508);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 6509);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 6510);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 6511);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 6512);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10368 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10368]);
            
		            val = _mm256_broadcast_ss(AB_val + 6513);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 6514);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11648 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11648]);
            
		            val = _mm256_broadcast_ss(AB_val + 6515);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 6516);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 6517);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 6518);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 6519);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 6520);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 6521);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 6522);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 6523);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14464 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14464]);
            
		            val = _mm256_broadcast_ss(AB_val + 6524);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 6525);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 6526);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14976 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14976]);
            
		            val = _mm256_broadcast_ss(AB_val + 6527);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 6528);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 6529);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 6530);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 6531);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[15872 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 124))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[15872 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8192 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8192]);
            
		            val = _mm256_broadcast_ss(AB_val + 6532);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8320 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8320]);
            
		            val = _mm256_broadcast_ss(AB_val + 6533);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9088 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9088]);
            
		            val = _mm256_broadcast_ss(AB_val + 6534);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9344 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9344]);
            
		            val = _mm256_broadcast_ss(AB_val + 6535);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 6536);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9728 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9728]);
            
		            val = _mm256_broadcast_ss(AB_val + 6537);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 6538);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 6539);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 6540);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 6541);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11904 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11904]);
            
		            val = _mm256_broadcast_ss(AB_val + 6542);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12160 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12160]);
            
		            val = _mm256_broadcast_ss(AB_val + 6543);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 6544);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 6545);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 6546);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 6547);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[16000 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 125))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[16000 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 6548);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 6549);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8704 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8704]);
            
		            val = _mm256_broadcast_ss(AB_val + 6550);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8832 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8832]);
            
		            val = _mm256_broadcast_ss(AB_val + 6551);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 6552);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9216 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9216]);
            
		            val = _mm256_broadcast_ss(AB_val + 6553);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 6554);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9856 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9856]);
            
		            val = _mm256_broadcast_ss(AB_val + 6555);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 6556);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10112 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10112]);
            
		            val = _mm256_broadcast_ss(AB_val + 6557);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 6558);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10880 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10880]);
            
		            val = _mm256_broadcast_ss(AB_val + 6559);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 6560);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11776 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11776]);
            
		            val = _mm256_broadcast_ss(AB_val + 6561);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 6562);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 6563);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12800 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12800]);
            
		            val = _mm256_broadcast_ss(AB_val + 6564);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12928 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12928]);
            
		            val = _mm256_broadcast_ss(AB_val + 6565);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13440 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13440]);
            
		            val = _mm256_broadcast_ss(AB_val + 6566);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 6567);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13952 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13952]);
            
		            val = _mm256_broadcast_ss(AB_val + 6568);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 6569);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14720 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14720]);
            
		            val = _mm256_broadcast_ss(AB_val + 6570);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15232 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15232]);
            
		            val = _mm256_broadcast_ss(AB_val + 6571);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15488 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15488]);
            
		            val = _mm256_broadcast_ss(AB_val + 6572);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15616 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15616]);
            
		            val = _mm256_broadcast_ss(AB_val + 6573);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16000 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16000]);
            
		            val = _mm256_broadcast_ss(AB_val + 6574);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16128 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16128]);
            
		            val = _mm256_broadcast_ss(AB_val + 6575);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[16256 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 16256]);
            
		            val = _mm256_broadcast_ss(AB_val + 6576);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[16128 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 126))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[16128 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}
#if X86
    for(int j=0; j < 1; j++)
    {
            ACC[j] = _mm256_setzero_ps();
    }

	#pragma vector aligned	
	for(int lane =0; lane < Tsz; lane += 8){
#elif ARM
    for(int j=0; j < 1; j++)
    {
            ACC[j] = vdupq_n_f32(0.0f);
    }

	for(int lane =0; lane < Tsz; lane += 4){
#endif


		            RC = _mm256_load_ps(&BC[8448 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8448]);
            
		            val = _mm256_broadcast_ss(AB_val + 6577);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8576 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8576]);
            
		            val = _mm256_broadcast_ss(AB_val + 6578);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[8960 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 8960]);
            
		            val = _mm256_broadcast_ss(AB_val + 6579);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9472 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9472]);
            
		            val = _mm256_broadcast_ss(AB_val + 6580);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9600 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9600]);
            
		            val = _mm256_broadcast_ss(AB_val + 6581);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[9984 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 9984]);
            
		            val = _mm256_broadcast_ss(AB_val + 6582);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10240 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10240]);
            
		            val = _mm256_broadcast_ss(AB_val + 6583);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[10624 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 10624]);
            
		            val = _mm256_broadcast_ss(AB_val + 6584);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11008 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11008]);
            
		            val = _mm256_broadcast_ss(AB_val + 6585);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11136 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11136]);
            
		            val = _mm256_broadcast_ss(AB_val + 6586);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11264 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11264]);
            
		            val = _mm256_broadcast_ss(AB_val + 6587);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11392 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11392]);
            
		            val = _mm256_broadcast_ss(AB_val + 6588);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[11520 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 11520]);
            
		            val = _mm256_broadcast_ss(AB_val + 6589);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12032 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12032]);
            
		            val = _mm256_broadcast_ss(AB_val + 6590);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12416 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12416]);
            
		            val = _mm256_broadcast_ss(AB_val + 6591);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12544 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12544]);
            
		            val = _mm256_broadcast_ss(AB_val + 6592);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[12672 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 12672]);
            
		            val = _mm256_broadcast_ss(AB_val + 6593);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13056 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13056]);
            
		            val = _mm256_broadcast_ss(AB_val + 6594);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13184 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13184]);
            
		            val = _mm256_broadcast_ss(AB_val + 6595);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13312 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13312]);
            
		            val = _mm256_broadcast_ss(AB_val + 6596);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13568 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13568]);
            
		            val = _mm256_broadcast_ss(AB_val + 6597);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[13696 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 13696]);
            
		            val = _mm256_broadcast_ss(AB_val + 6598);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14080 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14080]);
            
		            val = _mm256_broadcast_ss(AB_val + 6599);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14208 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14208]);
            
		            val = _mm256_broadcast_ss(AB_val + 6600);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14592 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14592]);
            
		            val = _mm256_broadcast_ss(AB_val + 6601);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[14848 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 14848]);
            
		            val = _mm256_broadcast_ss(AB_val + 6602);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15104 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15104]);
            
		            val = _mm256_broadcast_ss(AB_val + 6603);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15744 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15744]);
            
		            val = _mm256_broadcast_ss(AB_val + 6604);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            
		            RC = _mm256_load_ps(&BC[15872 + C_offset + lane]);
            
		            //RC = _mm256_load_ps(&BC[(C_offset + lane) * 128 + 15872]);
            
		            val = _mm256_broadcast_ss(AB_val + 6605);
            
		            ACC[0] = _mm256_fmadd_ps(RC, val, ACC[0]);
            

#if X86

   _mm256_store_ps(&AC[16256 + C_offset + lane],_mm256_max_ps(zero,_mm256_add_ps(ACC[0] , _mm256_broadcast_ss(AB_bias + 127))));
   ACC[0] = _mm256_setzero_ps();


#elif ARM

    vst1q_f32(&AC[16256 + C_offset + lane], ACC[0]); 
   ACC[0] = vdupq_n_f32(0.0f);

#endif
	}

}
//pthread_exit(NULL);
}

